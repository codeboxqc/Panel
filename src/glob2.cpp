#include <string.h>
#include <Arduino.h>
#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h>
#include <math.h>

#include <stdint.h>  // For uint16_t, int16_t, etc.
#include "gfx.h"
// Define panel dimensions
 
#include <string.h>
#include <stdint.h>  // For uint16_t, int16_t, etc.

// Define panel dimensions
 
#define NUMPTS 256
#define MAXDIAM 198
#define FRAMESPERCFG 350
#define ANGLEDIVISOR 6

 

// Cosine table from COSTBL.INC (signed 16-bit values)
static const int16_t CosTbl2[1024] = {
    32767, 32766, 32765, 32761, 32757, 32752, 32745, 32737, 32728, 32717, 32705, 32692,
    32678, 32663, 32646, 32628, 32609, 32589, 32567, 32545, 32521, 32495, 32469, 32441,
    32412, 32382, 32351, 32318, 32285, 32250, 32213, 32176, 32137, 32098, 32057, 32014,
    31971, 31926, 31880, 31833, 31785, 31736, 31685, 31633, 31580, 31526, 31470, 31414,
    31356, 31297, 31237, 31176, 31113, 31050, 30985, 30919, 30852, 30783, 30714, 30643,
    30571, 30498, 30424, 30349, 30273, 30195, 30117, 30037, 29956, 29874, 29791, 29706,
    29621, 29534, 29447, 29358, 29268, 29177, 29085, 28992, 28898, 28803, 28706, 28609,
    28510, 28411, 28310, 28208, 28105, 28001, 27896, 27790, 27683, 27575, 27466, 27356,
    27245, 27133, 27019, 26905, 26790, 26674, 26556, 26438, 26319, 26198, 26077, 25955,
    25832, 25708, 25582, 25456, 25329, 25201, 25072, 24942, 24811, 24680, 24547, 24413,
    24279, 24143, 24007, 23870, 23731, 23592, 23452, 23311, 23170, 23027, 22884, 22739,
    22594, 22448, 22301, 22154, 22005, 21856, 21705, 21554, 21403, 21250, 21096, 20942,
    20787, 20631, 20475, 20317, 20159, 20000, 19841, 19680, 19519, 19357, 19195, 19032,
    18868, 18703, 18537, 18371, 18204, 18037, 17869, 17700, 17530, 17360, 17189, 17018,
    16846, 16673, 16499, 16325, 16151, 15976, 15800, 15623, 15446, 15269, 15090, 14912,
    14732, 14553, 14372, 14191, 14010, 13828, 13645, 13462, 13279, 13094, 12910, 12725,
    12539, 12353, 12167, 11980, 11793, 11605, 11417, 11228, 11039, 10849, 10659, 10469,
    10278, 10087, 9896, 9704, 9512, 9319, 9126, 8933, 8739, 8545, 8351, 8157,
    7962, 7767, 7571, 7375, 7179, 6983, 6786, 6590, 6393, 6195, 5998, 5800,
    5602, 5404, 5205, 5007, 4808, 4609, 4410, 4210, 4011, 3811, 3612, 3412,
    3212, 3012, 2811, 2611, 2410, 2210, 2009, 1809, 1608, 1407, 1206, 1005,
    804, 603, 402, 201, 0, -201, -402, -603, -804, -1005, -1206, -1407,
    -1608, -1809, -2009, -2210, -2410, -2611, -2811, -3012, -3212, -3412, -3612, -3811,
    -4011, -4210, -4410, -4609, -4808, -5007, -5205, -5404, -5602, -5800, -5998, -6195,
    -6393, -6590, -6786, -6983, -7179, -7375, -7571, -7767, -7962, -8157, -8351, -8545,
    -8739, -8933, -9126, -9319, -9512, -9704, -9896, -10087, -10278, -10469, -10659, -10849,
    -11039, -11228, -11417, -11605, -11793, -11980, -12167, -12353, -12539, -12725, -12910, -13094,
    -13279, -13462, -13645, -13828, -14010, -14191, -14372, -14553, -14732, -14912, -15090, -15269,
    -15446, -15623, -15800, -15976, -16151, -16325, -16499, -16673, -16846, -17018, -17189, -17360,
    -17530, -17700, -17869, -18037, -18204, -18371, -18537, -18703, -18868, -19032, -19195, -19357,
    -19519, -19680, -19841, -20000, -20159, -20317, -20475, -20631, -20787, -20942, -21096, -21250,
    -21403, -21554, -21705, -21856, -22005, -22154, -22301, -22448, -22594, -22739, -22884, -23027,
    -23170, -23311, -23452, -23592, -23731, -23870, -24007, -24143, -24279, -24413, -24547, -24680,
    -24811, -24942, -25072, -25201, -25329, -25456, -25582, -25708, -25832, -25955, -26077, -26198,
    -26319, -26438, -26556, -26674, -26790, -26905, -27019, -27133, -27245, -27356, -27466, -27575,
    -27683, -27790, -27896, -28001, -28105, -28208, -28310, -28411, -28510, -28609, -28706, -28803,
    -28898, -28992, -29085, -29177, -29268, -29358, -29447, -29534, -29621, -29706, -29791, -29874,
    -29956, -30037, -30117, -30195, -30273, -30349, -30424, -30498, -30571, -30643, -30714, -30783,
    -30852, -30919, -30985, -31050, -31113, -31176, -31237, -31297, -31356, -31414, -31470, -31526,
    -31580, -31633, -31685, -31736, -31785, -31833, -31880, -31926, -31971, -32014, -32057, -32098,
    -32137, -32176, -32213, -32250, -32285, -32318, -32351, -32382, -32412, -32441, -32469, -32495,
    -32521, -32545, -32567, -32589, -32609, -32628, -32646, -32663, -32678, -32692, -32705, -32717,
    -32728, -32737, -32745, -32752, -32757, -32761, -32765, -32766, -32767, -32766, -32765, -32761,
    -32757, -32752, -32745, -32737, -32728, -32717, -32705, -32692, -32678, -32663, -32646, -32628,
    -32609, -32589, -32567, -32545, -32521, -32495, -32469, -32441, -32412, -32382, -32351, -32318,
    -32285, -32250, -32213, -32176, -32137, -32098, -32057, -32014, -31971, -31926, -31880, -31833,
    -31785, -31736, -31685, -31633, -31580, -31526, -31470, -31414, -31356, -31297, -31237, -31176,
    -31113, -31050, -30985, -30919, -30852, -30783, -30714, -30643, -30571, -30498, -30424, -30349,
    -30273, -30195, -30117, -30037, -29956, -29874, -29791, -29706, -29621, -29534, -29447, -29358,
    -29268, -29177, -29085, -28992, -28898, -28803, -28706, -28609, -28510, -28411, -28310, -28208,
    -28105, -28001, -27896, -27790, -27683, -27575, -27466, -27356, -27245, -27133, -27019, -26905,
    -26790, -26674, -26556, -26438, -26319, -26198, -26077, -25955, -25832, -25708, -25582, -25456,
    -25329, -25201, -25072, -24942, -24811, -24680, -24547, -24413, -24279, -24143, -24007, -23870,
    -23731, -23592, -23452, -23311, -23170, -23027, -22884, -22739, -22594, -22448, -22301, -22154,
    -22005, -21856, -21705, -21554, -21403, -21250, -21096, -20942, -20787, -20631, -20475, -20317,
    -20159, -20000, -19841, -19680, -19519, -19357, -19195, -19032, -18868, -18703, -18537, -18371,
    -18204, -18037, -17869, -17700, -17530, -17360, -17189, -17018, -16846, -16673, -16499, -16325,
    -16151, -15976, -15800, -15623, -15446, -15269, -15090, -14912, -14732, -14553, -14372, -14191,
    -14010, -13828, -13645, -13462, -13279, -13094, -12910, -12725, -12539, -12353, -12167, -11980,
    -11793, -11605, -11417, -11228, -11039, -10849, -10659, -10469, -10278, -10087, -9896, -9704,
    -9512, -9319, -9126, -8933, -8739, -8545, -8351, -8157, -7962, -7767, -7571, -7375,
    -7179, -6983, -6786, -6590, -6393, -6195, -5998, -5800, -5602, -5404, -5205, -5007,
    -4808, -4609, -4410, -4210, -4011, -3811, -3612, -3412, -3212, -3012, -2811, -2611,
    -2410, -2210, -2009, -1809, -1608, -1407, -1206, -1005, -804, -603, -402, -201,
    0, 201, 402, 603, 804, 1005, 1206, 1407, 1608, 1809, 2009, 2210,
    2410, 2611, 2811, 3012, 3212, 3412, 3612, 3811, 4011, 4210, 4410, 4609,
    4808, 5007, 5205, 5404, 5602, 5800, 5998, 6195, 6393, 6590, 6786, 6983,
    7179, 7375, 7571, 7767, 7962, 8157, 8351, 8545, 8739, 8933, 9126, 9319,
    9512, 9704, 9896, 10087, 10278, 10469, 10659, 10849, 11039, 11228, 11417, 11605,
    11793, 11980, 12167, 12353, 12539, 12725, 12910, 13094, 13279, 13462, 13645, 13828,
    14010, 14191, 14372, 14553, 14732, 14912, 15090, 15269, 15446, 15623, 15800, 15976,
    16151, 16325, 16499, 16673, 16846, 17018, 17189, 17360, 17530, 17700, 17869, 18037,
    18204, 18371, 18537, 18703, 18868, 19032, 19195, 19357, 19519, 19680, 19841, 20000,
    20159, 20317, 20475, 20631, 20787, 20942, 21096, 21250, 21403, 21554, 21705, 21856,
    22005, 22154, 22301, 22448, 22594, 22739, 22884, 23027, 23170, 23311, 23452, 23592,
    23731, 23870, 24007, 24143, 24279, 24413, 24547, 24680, 24811, 24942, 25072, 25201,
    25329, 25456, 25582, 25708, 25832, 25955, 26077, 26198, 26319, 26438, 26556, 26674,
    26790, 26905, 27019, 27133, 27245, 27356, 27466, 27575, 27683, 27790, 27896, 28001,
    28105, 28208, 28310, 28411, 28510, 28609, 28706, 28803, 28898, 28992, 29085, 29177,
    29268, 29358, 29447, 29534, 29621, 29706, 29791, 29874, 29956, 30037, 30117, 30195,
    30273, 30349, 30424, 30498, 30571, 30643, 30714, 30783, 30852, 30919, 30985, 31050,
    31113, 31176, 31237, 31297, 31356, 31414, 31470, 31526, 31580, 31633, 31685, 31736,
    31785, 31833, 31880, 31926, 31971, 32014, 32057, 32098, 32137, 32176, 32213, 32250,
    32285, 32318, 32351, 32382, 32412, 32441, 32469, 32495, 32521, 32545, 32567, 32589,
    32609, 32628, 32646, 32663, 32678, 32692, 32705, 32717, 32728, 32737, 32745, 32752,
    32757, 32761, 32765, 32766
};

 

// Configuration structure
typedef struct {
    uint16_t phi, alp, rho;
    int16_t incphi, incalp, incrho, gapphi, gapalp;
    uint16_t sizeh, sizev;
    uint16_t color_r, color_g, color_b;  // Added color per preset
} Config2;

// DIVERSE PRESETS - Each looks completely different
static const Config2 presets2[28] = {
    // 1. Classic rotating globe (balanced)
    {56000, 6000, 48600, 400, 120, 100, -1200, 1200, 197, 197},

    // 2. Flat 2D spiral disc
    {17500, 64000, 18000, 400, 100, -80, -200, -2200, 197, 197},

    // 3. Dense star cluster (chaotic)
    {25900, 32500, 23600, -40, -320, -60, -1800, -500, 198, 255},

    // 4. Wireframe cube illusion
    {45500, 47200, 57600, -200, -200, -160, -1800, -600, 198, 0},

    // 5. Smooth cylinder
    {3000, 2600, 2800, 420, 100, 380, 100, 460, 197, 197},

    // 6. Meteor rain (fast streaks)
    {7600, 41200, 53800, -300, -100, 0, -20, -3400, 198, 0},

    // 7. Donut torus
    {35000, 55000, 41900, -180, -360, -100, -4900, -800, 198, 198},

    // 8. Rotating diamond sheet
    {6500, 42400, 50300, -20, -300, -50, -2300, -470, 198, 80},

    // 9. Double helix (DNA feel)
    {600, 60000, 53800, -120, -90, 0, -800, -3400, 198, 255},

    // 10. Galaxy swirl (arms expanding)
    {10100, 53700, 58400, -160, 260, 0, -60, -6000, 198, 198},

    // 11. Chaotic explosion
    {41400, 18500, 53800, -120, -80, 0, -1200, -3400, 198, 0},

    // 12. Ribbon wave (snake-like)
    {3800, 26500, 63300, 2200, -700, 0, -900, -1100, 198, 0},

    // 13. Starburst ring
    {49400, 200, 31300, -80, -80, 480, -260, -260, 197, 197},

    // 14. Flat plasma sheet
    {0, 47800, 10800, 0, 120, 100, 300, -4500, 198, 198},

    // 15. Chaotic field
    {63700, 25500, 53800, 60, -10, 0, -4000, -2000, 198, 0},

    // 16. Helix corkscrew
    {30700, 2100, 51800, 60, -10, 300, -4000, -1200, 198, 86},

    // 17. Rotating cube lattice
    {40500, 24600, 100, 1600, -600, 0, -760, -380, 198, 178},

    // 18. Expanding pulse disc
    {39300, 54800, 23800, 200, 160, 0, -3500, -1200, 198, 178},

        // 19. Deep Ocean Sphere (dark navy globe)
    {12200, 31500, 41000, 300, 200, 0, -2000, -1800, 50, 100},  

    // 20. Electric Blue Spiral
    {18500, 49500, 26500, 400, -600, 120, -2600, -300, 120, 255},  

    // 21. Plasma Ring (cyan pulse)
    {22200, 27500, 38900, -180, -220, -60, -3200, -900, 80, 180},  

    // 22. Aqua Helix (DNA swirl)
    {31500, 42000, 50700, 200, -300, 140, -2800, -1600, 60, 200},  

    // 23. Frozen Wave Sheet
    {6400, 29000, 57500, 1600, -400, 0, -1500, -600, 40, 160},  

    // 24. Nebula Cloud (chaotic scatter, teal glow)
    {41500, 38500, 29200, -300, -500, 0, -4200, -2100, 100, 220},  

    // 25. Blue Comet Trails
    {9500, 21000, 36000, 800, -200, 400, -1200, -3400, 90, 180},  

    // 26. Ice Cube Rotation
    {28000, 37000, 44000, -260, -180, -200, -2000, -2600, 70, 150},  

    // 27. Cosmic Whirlpool (dark-to-bright blue arms)
    {12500, 26500, 58500, -120, 320, 0, -500, -4800, 50, 255},  

    // 28. Arctic Starburst
    {37500, 30500, 42200, 2000, -600, 0, -1800, -300, 30, 120}

};





 

// Draw the globe points directly to the buffer (adapted for 64x64)
void drawGlobe2(Config2 *cfg) {
    uint16_t _phi = cfg->phi;
    uint16_t _alp = cfg->alp;
    uint16_t _rho = cfg->rho;
    uint16_t color = fastRGB565(1, 1, 254);

    for (int i = 0; i < NUMPTS; i++) {
        int16_t ax, dx;
        uint16_t bx;
        int32_t prod;

        // Compute X
        bx = _alp;
        dx = getCos(bx);
        bx = _phi;
        ax = getCos(bx);
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        dx <<= 1;
        ax = cfg->sizeh;
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        int orig_x = dx + 160;
        int x = (orig_x - 160) / 5 + 32;

        // Compute Y first term
        bx = _phi;
        dx = getSin(bx);
        bx = _rho;
        ax = getCos(bx);
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        dx <<= 1;
        ax = cfg->sizev;
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        int y = dx;

        // Compute Y second term
        bx = _alp;
        dx = getSin(bx);
        bx = _phi;
        ax = getCos(bx);
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        dx <<= 1;
        bx = _rho;
        ax = getSin(bx);
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        dx <<= 1;
        ax = cfg->sizeh;
        prod = (int32_t)ax * dx;
        dx = prod >> 16;
        y += dx;
        y += 101;
        int scaled_y = ((y - 101) * 8) / 25 + 32;

        // Draw if in bounds
        if (x >= 0 && x < WIDTH && scaled_y >= 0 && scaled_y < HEIGHT) {
            setBufferPixel(x, scaled_y, color);
        }

        // Increment angles for next point
        _alp += cfg->gapalp;
        _phi += cfg->gapphi;
    }
}

// Sequence handling (opening/closing presets)
static void doSequence2(Config2 *cfg, int *state, int *chngDiameter, uint16_t *chngDH, uint16_t *chngDV, int *preset_index) {
    int ax = *state;
    if (ax == 0) {
        (*chngDiameter)++;
        if (*chngDiameter == MAXDIAM) {
            (*state)++;
        }
    } else if (ax == FRAMESPERCFG) {
        (*chngDiameter)--;
        if (*chngDiameter == 0) {
            *state = 0;
            (*preset_index)++;
            
            // Optional: Add some randomness to preset order
            if (random(100) > 80) {  // 20% chance to jump randomly
                *preset_index = random(28);
            }
            
            *cfg = presets2[(*preset_index) % 28];
            *chngDH = cfg->sizeh;
            *chngDV = cfg->sizev;
        }
    } else {
        (*state)++;
    }

    // Update sizes during open/close
    if (*state == 0 || *state == FRAMESPERCFG) {
        int diam = *chngDiameter;
        cfg->sizeh = (uint16_t)((int32_t)diam * *chngDH / MAXDIAM);
        cfg->sizev = (uint16_t)((int32_t)diam * *chngDV / MAXDIAM);
    }
}





// Global variables for animation state
Config2 actual2 = presets2[0];
int preset_index2 = 0;
uint16_t chngDH2 = actual2.sizeh;
uint16_t chngDV2 = actual2.sizev;
int chngDiameter2 = 0;
int state2 = 0;

// Main globe animation function
void glob2() {
    clearTextBuffer();
    drawGlobe2(&actual2);
    pageFlip();

    // Update angles
    actual2.phi += actual2.incphi;
    actual2.alp += actual2.incalp;
    actual2.rho += actual2.incrho;

    // Handle sequence (non-interactive)
    doSequence2(&actual2, &state2, &chngDiameter2, &chngDH2, &chngDV2, &preset_index2);
}